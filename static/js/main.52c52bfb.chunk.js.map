{"version":3,"sources":["logo.svg","components/context/index.js","components/SearchStudent.js","components/Navbar.js","components/UserInfo.js","components/Topic.js","components/Topics.js","components/RecentBadge.js","components/RecentBadges.js","components/Course.js","components/Courses.js","App.js","serviceWorker.js","components/ScrollToTop.js","index.js"],"names":["module","exports","UserDataContext","React","createContext","Provider","SearchStudent","actions","useContext","searchInput","createRef","Form","inline","onSubmit","e","preventDefault","onSearch","current","value","currentTarget","reset","className","Control","type","placeholder","ref","Button","variant","NavbarComp","Navbar","bg","Container","Brand","as","Link","to","src","logo","id","alt","Nav","UserInfo","userData","firstName","name","split","numberOfBadges","badges","length","year","Date","earned_date","getFullYear","currentYearDiff","Jumbotron","fluid","points","total","toLocaleString","gravatar_url","Topic","topic","Col","lg","Card","Body","Topics","topicsData","Object","keys","map","index","key","filter","sort","a","b","slice","Row","RecentBadge","badge","md","Img","icon_url","format","RecentBadges","recentBadges","reverse","Course","match","courseName","params","relatedBadges","courses","title","toLowerCase","replace","Header","Title","Footer","Courses","localeCompare","uniqueCourses","Array","from","Set","course","link","url","exact","path","component","withRouter","props","render","useState","data","setData","isLoading","setIsLoading","username","setUsername","useEffect","history","push","fetch","then","response","json","catch","console","log","finally","Boolean","window","location","hostname","ScrollToTop","prevProps","this","pathname","scrollTo","Component","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.52c52bfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b7843101.svg\";","import React from 'react';\r\n\r\nexport const UserDataContext = React.createContext();\r\nexport const { Provider } = UserDataContext;","import React, { useContext } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { UserDataContext } from './context';\r\n\r\nconst SearchStudent = () => {\r\n  const { actions } = useContext(UserDataContext);\r\n  const searchInput = React.createRef();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    actions.onSearch(searchInput.current.value);\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  return (\r\n    <Form inline onSubmit={handleSubmit} className=\"mb-1 mt-2 mb-md-0 mt-md-0 flex-grow-1 flex-md-grow-0 flex-nowrap\">\r\n      <Form.Control \r\n        type=\"text\" \r\n        placeholder=\"username...\" \r\n        className=\"mr-sm-2 flex-grow-1\" \r\n        ref={searchInput}\r\n      />\r\n      <Button type=\"submit\" variant=\"outline-success\" className=\"flex-grow-1 text-nowrap ml-2 ml-sm-0\">Search Student</Button>\r\n    </Form>\r\n  );\r\n    \r\n}\r\n\r\nexport default SearchStudent;","import React from 'react';\r\nimport { Navbar, Container, Nav } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from '../logo.svg';\r\nimport SearchStudent from './SearchStudent';\r\n\r\nconst NavbarComp = () => (\r\n  <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Container className=\"flex-wrap\">\r\n      <Navbar.Brand as={Link} to=\"/\" className=\"border-right border-secondary pr-4\">\r\n        <img src={logo} id=\"treehouse-logo\" alt=\"Treehouse Logo\" />\r\n        <span className=\"ml-4\">Home</span>\r\n      </Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n        <Nav.Link as={Link} to=\"/courses\">Courses</Nav.Link>\r\n      </Nav>\r\n      <SearchStudent />\r\n    </Container>\r\n  </Navbar>\r\n);\r\n\r\nexport default NavbarComp;","import React, { useContext } from 'react';\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\nimport { UserDataContext } from './context';\r\n\r\nconst UserInfo = () => {\r\n  const { userData } = useContext(UserDataContext);\r\n  \r\n  const firstName = userData.name.split(' ')[0]; \r\n  const numberOfBadges = userData.badges.length;\r\n\r\n  const firstBadgeDate = new Date(userData.badges[0].earned_date);\r\n  const year = firstBadgeDate.getFullYear();\r\n\r\n  const currentYear = new Date();\r\n  const currentYearDiff = currentYear.getFullYear() - year;\r\n\r\n  return (\r\n    <Jumbotron fluid>\r\n      <Container>\r\n        <div className=\"d-flex flex-column flex-md-row justify-content-around align-items-center\">\r\n          <div className=\"order-2 order-md-1\">\r\n            <h1 className=\"display-4\">{ userData.name }</h1>\r\n            <p>{ firstName } started using treehouse in { year }. Over the past { currentYearDiff } years { firstName } has achieved <span className=\"lead text-success\">{ numberOfBadges }</span> badges and <span className=\"lead text-success\">{userData.points.total.toLocaleString()}</span> points.</p>\r\n          </div>\r\n          <img src={userData.gravatar_url} alt=\"avatar\" className=\"avatar order-1 order-md-2 mb-4 mb-md-0\" />\r\n        </div>\r\n      </Container> \r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default UserInfo;","import React from 'react';\r\nimport { Col, Card } from 'react-bootstrap';\r\n\r\nconst Topic = ({ topic }) => (\r\n  <Col lg=\"4\">\r\n    <Card className=\"mb-4 topic-card\">\r\n      <Card.Body className=\"text-center\">\r\n        <h5>{ topic.topic }</h5>\r\n        <p className=\"lead mb-1\">{ topic.points.toLocaleString() } Points</p>\r\n      </Card.Body>\r\n    </Card>\r\n  </Col>\r\n);\r\n\r\nexport default Topic;","import React, { useContext } from 'react';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport Topic from './Topic';\r\nimport { UserDataContext } from './context';\r\n\r\nconst Topics = () => {\r\n  const { userData } = useContext(UserDataContext);\r\n\r\n  const topicsData = Object.keys(userData.points).map((topic, index) => {\r\n    return {\r\n      key: index,\r\n      topic,\r\n      points: userData.points[topic]\r\n    } \r\n  }).filter(topic => topic.points) // remove topics with zero points\r\n    .sort((a, b) => (a.points < b.points) ? 1 : -1) // sort by highest points\r\n    .slice(1); // remove first object in array as this is total points\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {topicsData.map(topic => (\r\n          <Topic topic={topic} key={topic.key} /> \r\n        ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Topics;","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { Card, Row, Col } from 'react-bootstrap';\r\n\r\nconst RecentBadge = ({ badge }) => (\r\n  <Card className=\"mb-3\">\r\n    <Row>\r\n      <Col md=\"3\">\r\n        <Card.Body className=\"text-center\">\r\n          <Card.Img src={badge.icon_url} className=\"recent-badge-image\" />\r\n        </Card.Body>\r\n      </Col>\r\n      <Col md=\"9\">\r\n        <Card.Body className=\"h-100 d-flex flex-column justify-content-between\">\r\n          <h6>{ badge.name }</h6>\r\n          <small className=\"text-muted\">Achieved - <Moment format=\"Do MMMM YYYY\">{ badge.earned_date }</Moment></small>\r\n        </Card.Body>\r\n      </Col>\r\n    </Row>\r\n  </Card>\r\n);\r\n\r\nexport default RecentBadge;","import React, { useContext } from 'react';\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\nimport RecentBadge from './RecentBadge';\r\nimport { UserDataContext } from './context';\r\n\r\nconst RecentBadges = () => {\r\n  const { userData } = useContext(UserDataContext);\r\n\r\n  const newBadgesArray = [...userData.badges];\r\n  const recentBadges = newBadgesArray.reverse()\r\n                                     .slice(0, 5)\r\n                                     .map(badge => <RecentBadge badge={badge} key={badge.id} />);\r\n\r\n  return (\r\n    <Jumbotron fluid className=\"mb-0\">\r\n      <Container>\r\n        <h5 className=\"mb-3\">5 Most Recent Badges</h5>\r\n        { recentBadges }\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n    \r\n}\r\n\r\nexport default RecentBadges;","import React, { useContext } from 'react';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport Moment from 'react-moment';\r\nimport { UserDataContext } from './context';\r\n\r\nconst Course = ({ match }) => {\r\n  const { userData } = useContext(UserDataContext);\r\n\r\n  const { courseName } = match.params;\r\n\r\n  // get badges related to this course\r\n  const relatedBadges = userData.badges.filter(badge => {\r\n    if (badge.courses.length) {\r\n      const courseDasherized = badge.courses[0].title.toLowerCase().replace(/ /g, '-');\r\n\r\n      return courseDasherized === courseName;\r\n    }\r\n\r\n    return false;\r\n  });\r\n\r\n  return (\r\n    <Row>\r\n      {relatedBadges.map((badge, index) => (\r\n        <Col lg=\"4\" key={index} className=\"mb-4\">\r\n          <Card className=\"mb-4 h-100\">\r\n            <Card.Header>\r\n              <Card.Title className=\"text-center h6\">{ badge.name }</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body className=\"d-flex justify-content-center align-items-center perspective\">\r\n              <Card.Img src={badge.icon_url} className=\"badge-image\" />\r\n            </Card.Body>\r\n            <Card.Footer>\r\n              <small className=\"text-muted d-block text-center\">Date Earned - <Moment format=\"Do MMM YYYY\">{ badge.earned_date }</Moment></small>\r\n            </Card.Footer>\r\n          </Card>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Course; ","import React, { useContext } from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport Course from './Course';\r\nimport { UserDataContext } from './context';\r\n\r\nconst Courses = ({ match }) => {\r\n  const { userData } = useContext(UserDataContext);\r\n\r\n  // create array of course titles sorted in alphabetical order\r\n  const courses = userData.badges.filter(badge => badge.courses[0])\r\n                                 .map(badge => badge.courses[0].title)\r\n                                 .sort((a, b) => a.localeCompare(b));\r\n\r\n  // remove duplicates from the course array\r\n  // create an object for each course with the name and link props \r\n  const uniqueCourses = Array.from(new Set(courses))\r\n                              .map(course => ({\r\n                                name: course,\r\n                                link: `${match.url}/${course.toLowerCase().replace(/ /g, '-')}`\r\n                              }));\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <Route exact path={match.path}>\r\n        <h4 className=\"text-center mb-4\">Courses</h4>\r\n        <Row className=\"form-row mb-4\">\r\n          {uniqueCourses.map((course, index) => (\r\n            <Col lg=\"4\" key={index}>\r\n              <Link to={course.link} className=\"course-link\">\r\n                <Card className=\"course-title mb-2\">\r\n                  <Card.Body className=\"d-flex align-items-center\">\r\n                    { course.name }\r\n                  </Card.Body>\r\n                </Card>\r\n              </Link>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Route>\r\n      <Route path={`${match.path}/:courseName`} component={Course} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Courses;","import React, { useState, useEffect } from 'react';\r\nimport { Route, withRouter } from 'react-router-dom';\r\nimport Navbar from './components/Navbar';\r\nimport UserInfo from './components/UserInfo';\r\nimport Topics from './components/Topics';\r\nimport RecentBadges from './components/RecentBadges';\r\nimport Courses from './components/Courses';\r\nimport { Provider } from './components/context';\r\n\r\nconst App = (props) => {\r\n  const [data, setData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [username, setUsername] = useState(\"lewismarshall\")\r\n\r\n  const updateUsername = (username) => setUsername(username);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    setData(null);\r\n\r\n    // redirect back to home page on search\r\n    props.history.push('/');\r\n\r\n    fetch(`https://teamtreehouse.com/${username}.json`)\r\n      .then(response => response.json())\r\n      .then(data => setData(data))\r\n      .catch(() => console.log(\"User Not Found\"))\r\n      .finally(() => setIsLoading(false));\r\n  }, [username]);\r\n\r\n  let render;\r\n\r\n  if (isLoading) { // display loading heading\r\n    render = <h1 className=\"display-4 text-center mt-5\">Loading...</h1>;\r\n  } else if (!data) { // display not found\r\n    render = <h1 className=\"display-4 text-center mt-5\">User Not Found</h1>;\r\n  } else { // display user info\r\n    render =  <>\r\n                <Route exact path=\"/\">\r\n                  <UserInfo />\r\n                  <Topics />\r\n                  <RecentBadges />\r\n                </Route>\r\n                <Route path=\"/courses\" component={Courses} />\r\n              </>  \r\n  }\r\n  \r\n  return (\r\n    <Provider value={{\r\n      userData: data,\r\n      actions: {\r\n        onSearch: updateUsername\r\n      }\r\n    }}>\r\n      <Navbar />\r\n      { render }\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass ScrollToTop extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location.pathname !== prevProps.location.pathname) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport ScrollToTop from './components/ScrollToTop';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}